/*buildscript {
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
	}
}

plugins {
	id 'fabric-loom' version '0.2.5-SNAPSHOT'
	id 'maven-publish'
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
}

dependencies {

	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.
	
	// We implement the API to include bukkit. This jar is shadowed in at the end of build
	shadow "org.bukkit:bukkit:1.14.4-R0.1-SNAPSHOT"
}

shadowJar {
	classifier = "shadow"
	configurations = [project.configurations.shadow]
}

task remapJar(type: net.fabricmc.loom.task.RemapJarTask, overwrite: true) {
	dependsOn shadowJar
	from zipTree(shadowJar.archiveFile)

	classifier = "release"
	//	input = shadowJar.archiveFile
	//	classifier = "release"
	//output = file("build/libs/${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
*/

buildscript {
	repositories {
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath "com.github.jengelman.gradle.plugins:shadow:5.0.0"
	}
}

plugins {
	id 'fabric-loom' version '0.2.5-SNAPSHOT'
	id 'maven-publish'
}

apply plugin: "com.github.johnrengelman.shadow"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

if(rootProject.file('private.gradle').exists()) { //Publishing details
	apply from: 'private.gradle'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
   		url "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
	}
		
	maven {
   		url "https://oss.sonatype.org/content/repositories/snapshots"
	}
}

minecraft {
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}"
	modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

	
	// We implement the API to include bukkit. This jar is shadowed in at the end of build
	compile "org.bukkit:bukkit:1.14.4-R0.1-SNAPSHOT"
}

task jar(type: Jar, overwrite: true) {
	classifier = "compile"
	from compileJava
	from processResources
}

shadowJar {
	classifier = "shadow"
	configurations = [project.configurations.shadow]
}

task remapJar(type: net.fabricmc.loom.task.RemapJarTask, overwrite: true) {
	dependsOn shadowJar
	from zipTree(shadowJar.archiveFile)

	classifier = "release"
	//	input = shadowJar.archiveFile
	//	classifier = "release"
	//output = file("build/libs/${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar")
}

processResources {
	inputs.property "version", project.version

	from(sourceSets.main.resources.srcDirs) {
		include "fabric.mod.json"
		expand "version": project.version
	}

	from(sourceSets.main.resources.srcDirs) {
		exclude "fabric.mod.json"
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	//baseName = "Jankson"
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		maven(MavenPublication) {
			artifact ("${project.buildDir.absolutePath}/libs/${archivesBaseName}-${project.version}.jar") { //release jar - file location not provided anywhere in loom
				classifier null
				builtBy remapJar
			}

			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}